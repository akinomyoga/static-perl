use Test::EnumA;
use Test::EnumB;
use Test::EnumC;
use Test::Point;
use Test::Foo;
use Test::Foo::Point3D;
use Test::Simple;

package Test {
  sub main() : int {
    my $num2 = 5;
    
    switch($num2) {
      case 1:
        1;
      case 3:
        2;
      default:
        5;
    }
    
    die "aaaaa";
    
    # my $num;
    # my $num1 = undef;
    
    my $num1 : int;
    $num1 = 5;
    
    my $num = 5;
    
    if (1) {
      3;
      if (2) {
        4;
      }
      5;
    }
    6;

    for (my $i : int = 0; $i < 5; $i = $i + 1) {
      1;
      last;
      next;
    }

    while (1) {
      1;
    }

    my $simple3 = new Test::Simple;
    
    $simple3->y = 2;
    $simple3->x;
    $simple3->y;

    my $simple2 : Test::Simple = new Test::Simple;
    
    if (1) { }
    if (1.5) { }
    if ($simple2) { }
    
    if (undef) {
    
    }
    
    if ($simple2 == undef) {
      
    }

    if (undef == $simple2) {
      
    }
    
    if (undef == undef) {
    
    }
    if (undef != undef) {
    
    }
    
    if (5 || 6) {
    
    }

    if (5 && 6) {
    
    }
    if (!1) {
    
    }
    
    if (1 > 2) {
      3;
      4;
    };
    5;

    if (1.2 > 2) {};
    if (1.2 >= 2) {};
    if (1.2 < 2) {};
    if (1.2 <= 2) {};

    if (1.2 == 1) { }
    if (1.2 != 2) { };

    if (1 > 2) {};
    if (1 >= 2) {};
    if (1 < 2) {};
    if (1 <= 2) {};

    if (1 == 1) { }
    if (1 != 2) { };

    [1, 2, 3];
    [[1, 2, 3], [1, 2, 3]];
    my $nums : int[] = new int[3];
    my $simple : Test::Simple = new Test::Simple;
    my $simples : Test::Simple[] = new Test::Simple[3];
    my $simples2 : Test::Simple[][] = new Test::Simple[][4];
    
    my $nums_length : int = @$nums;
    
    my $v1 : int;
    my $v2 : int;
    my $v3 : int;
    
    $v3 = $v2 = $v1 = 5;
    
    100;
    1000;
    1 << 2;
    1 >> 2;
    1 >>> 2;
    
    Test::EnumA::ONE();
    Test::EnumA::TWO();
    
    my $var : int = 4;
    $var++;
    $var--;
    --$var;
    ++$var;

    1 ^ 4;
    1 & 2;
    1 | 2;
    my $foo2 : int[];
    $foo2->[1] = 5;
    $foo2->[2];
    my $foo : int;
    $foo = 1;
    4 % 6;
    -3 + +2;
    3 - (1 + 2);
    5 + 19;
    1 / 3;
    1.2 / 3;
    1 * 2;
    1.2 * 4;
    1 + 2;
    1.2 + 3;
    1 - 2;
    1.2 - 3;
    
    if (1 > 2) {};
    if (1 >= 2) {};
    if (1 < 2) {};
    if (1 <= 2) {};

    if (1 == 1) { }
    if (1 != 2) { };
    1 = 1;
    1 - 4;

    1 | 2;

    1 & 3;

    while (1) {
      1;
    }
    "abcde";
    "";

    # _sum();
    # sum_foo();
    
    # $title->[3];
    # $title->[3] = 4;

    my $bar : double = (double)1;
    undef;
  }

  sub sum3 ($simple : Test::Simple, $foo : int, $bar : float) : int {
    
    if (3) {
    
    }
    
    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    else {
      
    }

    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    elsif (5) {
    
    }
    else {
      
    }
    
    if (1) {
      
    }
    else {
      
    }
    
    return 1;
  }

}
