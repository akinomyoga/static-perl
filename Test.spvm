package Test {
  use Test::EnumA;
  use Test::EnumB;
  use Test::EnumC;
  use Test::Point;
  use Test::Foo;
  use Test::Foo::Point3D;
  use Test::TypedefCore;
  use Test::TypedefClass;
  use Test::TypedefArray;
  use Test::TypedefArray2;
  use Test::TypedefSub;
  use Test::ValueClass;
  use Test::Simple;
  
  sub main() : int {
    my $v1 : int = 10;
    $v1 = 10;
    100;
    1000;
    1 << 2;
    1 >> 2;
    1 >>> 2;
    
    Test::EnumA::ONE();
    my $simple : Test::Simple = new Test::Simple;
    
    my $var : int = 4;
    $var++;
    $var--;
    --$var;
    ++$var;

    [1, 2, 3];
    1 ^ 4;
    1 & 2;
    1 | 2;
    my $foo2 : int[];
    $foo2->[1] = 5;
    $foo2->[2];
    my $foo : int;
    $foo = 1;
    4 % 6;
    -3 + +2;
    3 - (1 + 2);
    5 + 19;
    1 / 3;
    1.2 / 3;
    1 * 2;
    1.2 * 4;
    1 + 2;
    1.2 + 3;
    1 - 2;
    1.2 - 3;
    1 > 2;
    1 >= 2;
    1 < 2;
    1 <= 2;

    1 == 1;
    1 = 1;
    1 - 4;

    1 || 2;
    1 | 2;

    1 && 2;
    1 & 3;

    while (1) {
      1;
    }
    "abcde";
    "";

    # _sum();
    # sum_foo();
    
    # $title->[3];
    # $title->[3] = 4;

    my $bar : double = (double)1;
    undef;

    my $i : int;
    for ($i = 0; $i < 5; $i = $i + 1) {
      1;
      last;
      next;
    }
  }

  sub sum3 ($foo : int, $bar : float) : int {
    
    if (3) {
    
    }
    
    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    else {
      
    }

    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    elsif (5) {
    
    }
    else {
      
    }
    
    if (1) {
      
    }
    else {
      
    }
    
    return 1;
  }

}
